image: openjdk:11-jdk-slim

before_script:
  - 'source /tool/.bash_profile_docker'
  - export GRADLE_USER_HOME=`pwd`/.gradle

stages:
  - build_gradle
  - build_test
  - build_artifact
  - build_image
  - deploy

variables:
  MAVEN_SETTING_OPTS: "--settings ./.m2/settings.xml --batch-mode"
  MAVEN_TEST_OPTS: "sonar:sonar"
  MAVEN_BUILD_OPTS: " -Dmaven.test.skip=true -Dfindbugs.skip=true -Dcheckstyle.skip"
  MAVEN_OPTS: "-Xmx2048m -Xms1024m -XX:MaxPermSize=512m -Djava.awt.headless=true"
  IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}
  IMAGE_TAG: ${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_IID}
  PROD_RELEASE_NAME: ${CI_PROJECT_NAME}
  JACOCO_CSV_LOCATION: $CI_PROJECT_DIR/build/reports/jacoco/test/jacocoTestReport.csv
  GIT_DEPTH: 1


task_gradle:
  stage: build_gradle
  tags:
    - docker-runner
  script:
    - ./gradlew assemble
  only:
    changes:
      - "*.gradle"
      - gradle.properties
  cache:
    key: gradle-cache-key
    paths:
      - $GRADLE_USER_HOME
      - build
    policy: push

task_test:
  tags:
    - docker-runner
  stage: build_test
  only:
    - to_gradle
  except:
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  script:
    - echo $GRADLE_USER_HOME
    - pwd
    - ls -a
    - ./gradlew check --stacktrace
    - ls -a
    - awk -F"," '{ instructions += $4 + $5; covered += $5 } END { print covered, "/", instructions, "instructions covered"; print "Total " int(100*covered/instructions) "% covered"}' $JACOCO_CSV_LOCATION
  cache:
    key: gradle-cache-key
    paths:
      - $GRADLE_USER_HOME
      - build
    policy: pull
  artifacts:
    reports:
      junit:
        - build/test-results/test/**/TEST-*.xml


task_build_artifact:
  tags:
    - docker-runner
  stage: build_artifact
  only:
    refs:
      - to_gradle
  script:
    - echo "Running mvn compile \n"
    - ./gradlew bootjar --build-cache
  cache:
    key: gradle-cache-key
    paths:
      - $GRADLE_USER_HOME
      - build
    policy: pull
  artifacts:
    paths:
      - build/libs
    expire_in: 1 day


task_build_image:
  tags:
    - docker-runner
  stage: build_image
  only:
    refs:
      - master
  image: docker:19.03.1
  script:
    - echo "Running build docker image"
    - 'REPO=${PROD_RELEASE_NAME} consul-template -config /tool/consul-config/.consul-template.hcl -template "application.tpl:tmp.tpl" -once && consul-template -config /tool/consul-config/.consul-template.hcl -template "tmp.tpl:./target/application.properties" -once'
    - 'docker build -t ${IMAGE}:${IMAGE_TAG} .'
    - 'docker --config=/tool/.docker/ push ${IMAGE}:${IMAGE_TAG}'
    - echo "Clean image cache for docker runner"
    - 'docker --config=/tool/.docker/ rmi ${IMAGE}:${IMAGE_TAG}'
    - echo "Finished build docker image ${IMAGE} ${IMAGE_TAG}"

task_deploy:
  tags:
    - linux
  stage: deploy
  only:
    refs:
      - master
  before_script:
    - echo "Running deploy docker image"
  script:
    - ssh API-DEV /home/ec2-user/satp/starter.sh ${IMAGE} ${IMAGE_TAG}


